// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Aegon.Test.Common.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Sidebar Modules checks")]
    public partial class SidebarModulesChecksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SidebarModules.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sidebar Modules checks", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Content page RHS modules checks")]
        [NUnit.Framework.TestCaseAttribute("SANDBOX", "/modules/rhscontentpage", "Content", "RHS column test", "RHSModule", "26594", "3", null)]
        public virtual void ContentPageRHSModulesChecks(string site, string page, string property1, string propertyValue1, string property2, string propertyValue2, string numberOfModules, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Content page RHS modules checks", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
    testRunner.Given(string.Format("On {0} site I have prepared {1} content page", site, page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
    testRunner.Given(string.Format("On {0} {1} I set the value of {2} property to {3}", site, page, property1, propertyValue1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
    testRunner.Given(string.Format("On {0} {1} I set the value of {2} property to {3}", site, page, property2, propertyValue2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.When("I go to that page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
    testRunner.Then("Right-hand side column should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
    testRunner.And(string.Format("I should see {0} modules in right-hand side column", numberOfModules), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Newsitem page RHS modules checks")]
        [NUnit.Framework.TestCaseAttribute("SANDBOX", "/modules/rhsnewsitempage", "Content", "RHS column test", "RHSModule", "26594", "3", null)]
        public virtual void NewsitemPageRHSModulesChecks(string site, string page, string property1, string propertyValue1, string property2, string propertyValue2, string numberOfModules, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Newsitem page RHS modules checks", exampleTags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
    testRunner.Given(string.Format("On {0} site I have prepared {1} newsitem page", site, page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
    testRunner.Given(string.Format("On {0} {1} I set the value of {2} property to {3}", site, page, property1, propertyValue1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
    testRunner.Given(string.Format("On {0} {1} I set the value of {2} property to {3}", site, page, property2, propertyValue2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
    testRunner.When("I go to that page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
    testRunner.Then("Right-hand side column should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
    testRunner.And(string.Format("I should see {0} modules in right-hand side column", numberOfModules), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Overview page RHS modules checks")]
        [NUnit.Framework.TestCaseAttribute("SANDBOX", "/modules/rhsoverviewpage", "RHSModule", "26594", "3", null)]
        public virtual void OverviewPageRHSModulesChecks(string site, string page, string property1, string propertyValue1, string numberOfModules, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Overview page RHS modules checks", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
    testRunner.Given(string.Format("On {0} site I have prepared {1} overview test page with dummy data source", site, page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
    testRunner.Given(string.Format("On {0} {1} I set the value of {2} property to {3}", site, page, property1, propertyValue1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
    testRunner.When("I go to that page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
    testRunner.Then("Right-hand side column should be visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
    testRunner.And(string.Format("I should see {0} modules in right-hand side column", numberOfModules), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
